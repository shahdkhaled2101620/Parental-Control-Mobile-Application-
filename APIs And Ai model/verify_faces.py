import osimport uuid# Suppress TensorFlow warningsos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'import tensorflow as tffrom deepface import DeepFacefrom flask import Flask, jsonify, requestimport mysql.connectorimport logging# Configure logginglogging.basicConfig(level=logging.DEBUG)logger = logging.getLogger(__name__)app = Flask(__name__)# Folder configurationsUPLOAD_FOLDER = "/var/www/html/ParentalCo/CameraImages"IMAGE_FOLDER = "/var/www/html/ParentalCo/uploads"app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER# MySQL connectiondef get_db_connection():    return mysql.connector.connect(        host='localhost',        user='root',        password='Pc01150685814#',  # Add your password if needed        database='parental_control_db'    )@app.route('/verify', methods=['POST'])def verify_faces():    try:        # Check if the post request has the file part        if 'image' not in request.files:            return jsonify({"error": "No image part in the request."}), 400        file = request.files['image']        # If the user does not select a file, the browser submits an empty part without filename        if file.filename == '':            return jsonify({"error": "No selected file."}), 400        # Ensure the file is an image        allowed_extensions = {'jpg', 'jpeg', 'png'}        if '.' not in file.filename or file.filename.rsplit('.', 1)[1].lower() not in allowed_extensions:            return jsonify({"error": "Invalid file type. Only JPEG, PNG, and GIF are allowed."}), 400        # Get parent_id from the form data        parent_id = request.form.get('parent_id')        if not parent_id:            return jsonify({"error": "Missing parent_id in request."}), 400        # Define the upload directory        upload_dir = app.config['UPLOAD_FOLDER']        if not os.path.exists(upload_dir):            os.makedirs(upload_dir, exist_ok=True)        # Generate a unique filename        file_extension = file.filename.split('.')[-1]        file_name = f"camera_{uuid.uuid4().hex}.{file_extension}"        file_path = os.path.join(upload_dir, file_name)        # Save the uploaded file        file.save(file_path)        # Connect to DB        conn = get_db_connection()        cursor = conn.cursor()        # Step 1: Check against parent with given parent_id        cursor.execute("SELECT Image_Path FROM Parent WHERE Parent_ID = %s AND Image_Path IS NOT NULL", (parent_id,))        parent_result = cursor.fetchone()        if parent_result:            parent_image_path = os.path.join(IMAGE_FOLDER, parent_result[0])            if os.path.exists(parent_image_path):                try:                    result = DeepFace.verify(                        file_path,                        parent_image_path,                        enforce_detection=False                    )                    if result["verified"]:                        # Delete the uploaded image before returning the response                        os.remove(file_path)                        return jsonify({                            "verified": True,                            "matched_with": f"Parent ID {parent_id}",                            "message": "Verified as parent"                        }), 200                except Exception as e:                    logger.error(f"Error verifying parent image: {str(e)}")                    # Delete the uploaded image even if an error occurs                    os.remove(file_path)                    return jsonify({"error": f"Error verifying parent image: {str(e)}"}), 500        # Step 2: Check against children with same parent_id        cursor.execute("SELECT Child_ID, Image_Path FROM Child WHERE Parent_ID = %s AND Image_Path IS NOT NULL", (parent_id,))        children = cursor.fetchall()        # Flag to track if any child matches        matched_child = None        for child_id, image_name in children:            db_image_path = os.path.join(IMAGE_FOLDER, image_name)            if os.path.exists(db_image_path):                try:                    result = DeepFace.verify(                        file_path,                        db_image_path,                        enforce_detection=False                    )                    if result["verified"]:                        matched_child = {                            "verified": True,                            "matched_with": f"Child ID {child_id}",                            "image": image_name,                            "message": "Static page"                        }                        break  # Stop checking further children once a match is found                except Exception as e:                    logger.error(f"Error verifying child image: {str(e)}")                    # Continue checking other children even if one fails        # Delete the uploaded image after processing all children        if os.path.exists(file_path):            os.remove(file_path)        if matched_child:            return jsonify(matched_child), 200        return jsonify({"verified": False, "message": "No match found for this parent ID."}), 200    except Exception as e:        logger.error(f"Unexpected error: {str(e)}")        return jsonify({"error": "An unexpected error occurred."}), 500if __name__ == "__main__":    # Bind to all network interfaces (0.0.0.0) and port 5000    app.run(host='0.0.0.0', port=5000, debug=True)